## 최대값만 검출하는 코드

#include <stdio.h>  // 표준 입출력 함수들을 사용하기 위해 표준 입출력 헤더 파일을 포함

int main()
{
    int n;  // 입력할 데이터의 개수를 저장할 변수
    int arr[100];  // 최대 100개의 정수를 저장할 수 있는 배열

    // 사용자에게 입력할 데이터의 개수를 물어봄
    printf("입력할 개수 :");

    // 사용자로부터 입력할 데이터의 개수를 읽어옴
    scanf_s("%d", &n);

    // 사용자가 입력한 개수만큼 반복하여 정수를 입력받음
    for (int i = 0; i < n; i++)
    {
        // 사용자로부터 정수를 입력받아 배열에 저장
        scanf_s("%d", &arr[i]);
    }

    // 큰 수를 찾기 위해 출력 메시지를 출력
    printf("\n 큰 수 출력 \n");

    // 배열의 첫 번째 요소를 최대값으로 초기화
    int MAX = arr[0];

    // 배열의 두 번째 요소부터 끝까지 반복
    for (int i = 1; i < n; i++)
    {
        // 현재 요소가 최대값보다 크면 최대값을 현재 요소로 업데이트
        if (MAX < arr[i])
        {
            MAX = arr[i];
        }
    }

    // 최대값을 출력
    printf("최대값 : %d\n", MAX);

    return 0;  // 프로그램을 정상적으로 종료하며 0을 반환
}

## 최소값만 검출하는 코드

#include <stdio.h>  // 표준 입출력 함수들을 사용하기 위해 표준 입출력 헤더 파일을 포함

int main()
{
    int n;  // 입력할 데이터의 개수를 저장할 변수
    int arr[100];  // 최대 100개의 정수를 저장할 수 있는 배열

    // 사용자에게 입력할 데이터의 개수를 물어봄
    printf("입력할 개수 :");

    // 사용자로부터 입력할 데이터의 개수를 읽어옴
    scanf_s("%d", &n);

    // 사용자가 입력한 개수만큼 반복하여 정수를 입력받음
    for (int i = 0; i < n; i++)
    {
        // 사용자로부터 정수를 입력받아 배열에 저장
        scanf_s("%d", &arr[i]);
    }

    // 최소값을 찾기 위해 출력 메시지를 출력
    printf("\n MIN  출력 \n");

    // 배열의 첫 번째 요소를 최소값으로 초기화
    int MIN = arr[0];

    // 배열의 두 번째 요소부터 끝까지 반복
    for (int i = 1; i < n; i++)
    {
        // 현재 요소가 최소값보다 작으면 최소값을 현재 요소로 업데이트
        if (MIN > arr[i])
        {
            MIN = arr[i];
        }
    }

    // 최소값을 출력
    printf("최소값 : %d\n", MIN);

    return 0;  // 프로그램을 정상적으로 종료하며 0을 반환
}

## 최대값과 최소값 모두 검출하는 코드

#define _CRT_SECURE_NO_WARNINGS // Visual Studio에서 'fopen' 같은 함수 사용 시 발생하는 보안 경고를 비활성화합니다.

#include <stdio.h> // 표준 입출력 라이브러리를 포함합니다. 'printf', 'fscanf' 등의 함수 사용을 위해 필요합니다.

#define SIZE 100 // 배열의 최대 크기를 100으로 정의합니다.

int main(void)
{
    FILE* file; // 파일 포인터를 선언하여 파일 작업을 관리합니다.
    int a[SIZE] = { 0, }; // 크기가 100인 정수 배열 'a'를 선언하고 모든 요소를 0으로 초기화합니다.
    int count = 0; // 파일에서 읽은 정수의 개수를 세기 위한 변수를 초기화합니다.
    int value; // 파일에서 읽은 값을 임시로 저장할 변수를 선언합니다.
    int temp; // (필요 없지만) 파일에서 다시 읽은 값을 저장하려는 임시 변수를 선언합니다.
    int i, n = 0; // 반복문에 사용할 변수 'i'와 (필요 없지만) 요소 개수를 추적하려는 변수 'n'을 선언합니다.
    int MAX = 0; // 최대값을 저장할 변수를 0으로 초기화합니다.
    int MIN = 10; // 최소값을 저장할 변수를 10으로 초기화합니다.

    file = fopen("data.txt", "r"); // 'data.txt' 파일을 읽기 모드("r")로 엽니다.
    if (file == NULL) // 파일이 열리지 않은 경우(즉, 'file'이 NULL인 경우)를 체크합니다.
    {
        printf("File does not exist"); // 파일이 존재하지 않으면 오류 메시지를 출력합니다.
        return -1; // 프로그램을 오류 코드 -1로 종료합니다.
    }

    for (count = 0; count < SIZE; count++) // 배열이 가득 차거나 파일이 끝날 때까지 값을 읽는 루프입니다.
    {
        if (fscanf(file, "%d", &value) != 1) break; // 파일에서 정수를 읽습니다. 읽기 실패 시(예: 파일 끝) 루프를 종료합니다.
        a[count] = value; // 읽은 값을 배열 'a'의 'count' 번째 인덱스에 저장합니다.
    }
    fclose(file); // 모든 값을 읽은 후 파일을 닫습니다.

    printf("파일의 데이터 개수: %d\n", count); // 파일에서 읽은 정수의 개수를 출력합니다.

    // 다음 while 루프는 이미 파일을 닫았기 때문에 작동하지 않으며, 사실상 도달할 수 없는 코드입니다.
    while (fscanf(file, "%d", &temp) == 1) 
    {
        a[n] = temp;
        n++;
    }

    fclose(file); // 파일을 다시 닫고 있지만, 이 코드는 필요 없으며, 실패할 것입니다.

    // 배열에서 최대값과 최소값을 찾기 위한 루프입니다.
    for (i = 0; i < count; i++)
    {
        if (MAX < a[i]) // 현재 요소가 현재 MAX보다 크다면 MAX를 업데이트합니다.
        {
            MAX = a[i];
        }
        
        if (MIN > a[i]) // 현재 요소가 현재 MIN보다 작다면 MIN을 업데이트합니다.
        {
            MIN = a[i];
        }
    }

    // 배열의 첫 9개 요소를 출력하는 루프입니다. (주의: 배열에 9개보다 적은 요소가 있으면 쓰레기 값을 출력할 수 있습니다.)
    for (i = 0; i < 9; i++)
    {
        printf("%d\n", a[i]); // 배열의 첫 9개 요소를 출력합니다.
    }

    printf("최대값은 %d입니다\n", MAX); // 배열에서 찾은 최대값을 출력합니다.
    printf("최소값은 %d입니다\n", MIN); // 배열에서 찾은 최소값을 출력합니다.

    return 0; // 프로그램이 성공적으로 종료됨을 나타내는 0을 반환합니다.
}





